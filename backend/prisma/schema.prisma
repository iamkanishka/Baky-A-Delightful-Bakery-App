// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String?  // Nullable for Google users
  googleId  String?  @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enum for Order Status
enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}


// Enum for Payment Status
enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}


// Customer Model
model Customer {
  id            Int           @id @default(autoincrement())
  name          String
  email         String        @unique
  password      String // Hashed password
  phone         String?
  address       String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  wallet        Wallet?       // One-to-one relation with Wallet
  paymentMethods PaymentMethods[] // One-to-many relation with PaymentMethods
  orders        Order[]       // One-to-many relation with Orders
  cart          Cart?         // One-to-one relation with Cart
}


// Bakery Model
model Bakery {
  id            Int           @id @default(autoincrement())
  name          String
  email         String        @unique
  phone         String
  address       String
  description   String?
  rating        Float?        @default(0.0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  orders        Order[]       // One-to-many relation with Orders
  products      Product[]     // One-to-many relation with Products (items sold by the bakery)
}


// Product Model (to represent items sold by bakeries)
model Product {
  id            Int           @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  imageUrl      String?
  bakeryId      Int
  bakery        Bakery        @relation(fields: [bakeryId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  cartItems     CartItem[]    // One-to-many relation with CartItems
  orderItems    OrderItem[]   // One-to-many relation with OrderItems
}


// Cart Model
model Cart {
  id            Int           @id @default(autoincrement())
  customerId    Int           @unique
  customer      Customer      @relation(fields: [customerId], references: [id])
  items         CartItem[]    // One-to-many relation with CartItems
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}